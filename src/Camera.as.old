/*package
{
	import flash.geom.Point;
	import net.flashpunk.Entity;
	import net.flashpunk.World;
	import net.flashpunk.FP;

	public class Camera
	{
		private var _subject:Entity;
		private var _stopped:Boolean;
		private var _pos:Point;
		private var _offset:Point;
		private var _world:World;
		private const _speed:Number = 1;

		public function get stopped():Boolean { return _stopped; }
		public function set stopped(stopped:Boolean):void { _stopped = stopped; }
		public function get offset():Point { return _offset; }
		public function set offset(p:Point):void { _offset = p; }
		public function get subject():Entity { return _subject}
		public function set subject(subject:Entity):void { _subject = subject; }

		public function Tracking():Boolean
		{
			return _stopped && _subject;
		}

		public function Camera(world:World, x:int = 0,y:int = 0)
		{
			_stopped = false;
			_subject = undefined;
			_world = world;

			_pos = new Point(x,y);
		}

		public function Update():void
		{
			//Track subject here
			if(!_stopped && _subject)
			{
				var direction:Point = new Point(_subject.x,_subject.y);
				direction.subtract(_pos);
				//displacement.subtract(_offset);
				direction.normalize(1);

				if(Math.abs(direction.x) >= 1 && Math.abs(direction.y) >= 1)
				{
					_pos.x += direction.x*_speed;
					_pos.y += direction.y*_speed;
				}
				else if(Math.abs(direction.y) >= 1)
				{
					_pos.y += direction.y*_speed;
				}
				else if(Math.abs(direction.x) >= 1)
				{
					_pos.x += direction.x*_speed
				}
			}
			FP.camera.copyFrom(_pos);
		}

		public function Track(ent:Entity,offset:Point = undefined):void
		{
			if(!offset)
			{
				//offset = new Point((FP.width - ent.x)/2,(FP.height-ent.y)/2);
				//offset = new Point(0,0);
				offset = new Point(0,0);
			}
			_subject = ent;
			_offset = offset;
		} 

		public function TrackTo(ent:Entity,offset:Point = undefined):void
		{
			_pos = new Point((ent.x,ent.y));
			offset = new Point(ent.x/2,ent.y/2);

			Track(ent,offset);
		}
	}
}*/
